Sender: LSF System <lsfadmin@eu-ms-012-37>
Subject: Job 129385758: <python3 dnn_m1e.py> in cluster <euler> Exited

Job <python3 dnn_m1e.py> was submitted from host <eu-login-15> by user <robinvo> in cluster <euler> at Mon Jun 29 10:43:59 2020
Job was executed on host(s) <eu-ms-012-37>, in queue <normal.4h>, as user <robinvo> in cluster <euler> at Mon Jun 29 10:44:11 2020
</cluster/home/robinvo> was used as the home directory.
</cluster/home/robinvo/rv_bachelor_thesis/SABR_Experiments> was used as the working directory.
Started at Mon Jun 29 10:44:11 2020
Terminated at Mon Jun 29 10:58:50 2020
Results reported at Mon Jun 29 10:58:50 2020

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input
python3 dnn_m1e.py
------------------------------------------------------------

Exited with exit code 1.

Resource usage summary:

    CPU time :                                   875.32 sec.
    Max Memory :                                 372 MB
    Average Memory :                             352.63 MB
    Total Requested Memory :                     1024.00 MB
    Delta Memory :                               652.00 MB
    Max Swap :                                   -
    Max Processes :                              3
    Max Threads :                                15
    Run time :                                   891 sec.
    Turnaround time :                            891 sec.

The output (if any) follows:

W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX2 instructions, but these are available on your machine and could speed up CPU computations.
W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use FMA instructions, but these are available on your machine and could speed up CPU computations.
0 	RMSE: 0.114571
1 	RMSE: 0.110431
2 	RMSE: 0.108989
3 	RMSE: 0.105002
4 	RMSE: 0.106274
Traceback (most recent call last):
  File "dnn_m1e.py", line 268, in <module>
    thetas_pred_rand[i,:] = predict_theta(prices_grid(thetas_true_rand[i,:]).flatten())
  File "dnn_m1e.py", line 256, in predict_theta
    I=scipy.optimize.least_squares(CostFuncLS,init,JacobianLS,bounds=bnds,gtol=1E-15,xtol=1E-15,ftol=1E-15,verbose=1)
  File "/cluster/apps/python/3.6.0/x86_64/lib64/python3.6/site-packages/scipy/optimize/_lsq/least_squares.py", line 848, in least_squares
    "actual {1}.".format((m, n), J0.shape))
ValueError: The return value of `jac` has wrong shape: expected (256, 3), actual (1, 3).
